name: Manual Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (prod/test)'
        required: true
        default: 'test'
        type: choice
        options:
          - prod
          - test
      branch:
        description: 'Branch to build from'
        required: true
        default: 'develop'
        type: string

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'test' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment-specific image name
        id: image-name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ inputs.environment }}"
          else
            ENV="test"
          fi
          REPO_NAME=$(echo "${{ env.BASE_IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_TAG=${{ env.REGISTRY }}/${REPO_NAME}-${ENV}:latest" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.image-name.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DB_CONNECTION=pgsql
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }} 